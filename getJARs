public static void main(String[] args) throws IOException {
        AtomicInteger count = new AtomicInteger(0);
        AtomicInteger missingCount = new AtomicInteger(0);
        Set<String> missingMavenData = new HashSet<String>();

        String FOLDER = "C:\\Users\\Vikram.Tamboli\\Documents\\NetBeansProjects\\BlueLink_NewWorkflow_27_July\\lib";
        Files
                .walk(Paths.get(FOLDER), FileVisitOption.FOLLOW_LINKS)
                .map(Path::toFile)
                .sorted()
                .filter(f -> f.isFile())
                .filter(f -> f.getName().endsWith(".jar"))
                .map(f -> {
                    try {
                        return new JarFile(f);
                    } catch (Exception e) {
                        e.printStackTrace();
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .map(jar -> {
                    Properties properties = null;
                    Enumeration<JarEntry> entries = jar.entries();
                    while (entries.hasMoreElements()) {
                        //System.out.println("Enumeration - " + entries.toString());
                        JarEntry jarEntry = entries.nextElement();
                        if (jarEntry.getName().matches("^META-INF/maven/.*/pom\\.properties$")) {
                            try {
                                properties = new Properties();
                                properties.load(jar.getInputStream(jarEntry));
                                break;
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
//                        if (jarEntry.getName().matches("^META-INF/MANIFEST.MF$")) {
//                            System.out.println(jarEntry.getName());
//                            try {
//                                BufferedReader br = new BufferedReader(new InputStreamReader(jar.getInputStream(jarEntry)));
//                                String line = br.readLine();
//                                while (line != null) {
//                                    if (line.matches("^*(?i)license")) {
//                                        missingCount.getAndIncrement();
//                                    }
//                                    line = br.readLine();
//                                }
//                            } catch (IOException ex) {
//                                Logger.getLogger(getJARs.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//
//                        }
                    }
                    if (properties == null) {
                        missingMavenData.add(jar.getName());

                    }
                    return properties;
                })
                .filter(Objects::nonNull)
                .forEach(properties -> {
                    System.out.println("<depencency>");
                    System.out.println("    <groupId>" + properties.getProperty("groupId") + "</groupId>");
                    System.out.println("    <artifactId>" + properties.getProperty("artifactId") + "</artifactId>");
                    System.out.println("    <version>" + properties.getProperty("version") + "</version>");
                    System.out.println("</depencency>");
                    count.incrementAndGet();
                });

        System.out.println("Those JAR files does not contain Maven metadata:");
        missingMavenData.forEach(System.out::println);
        System.out.println("Found - " + count.toString() + " NA - " + missingMavenData.size() + " Count - " + missingCount);
    }
