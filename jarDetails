public class JarDetails {

    static List<String> jarName;
    static String csvFile = "";

    public static void main(String[] args) throws IOException {
        //jarName = getJarNames();
        searchExcel();
        //parseXML();
    }

    //Convert the local jars to <dendency> tag which can be used in pom
    //From pom, extract report containing all info about jar : https://www.mojohaus.org/license-maven-plugin/examples/example-download-licenses.html
    public static List<String> getJarNames() throws IOException {
        List<String> jarNameList = new ArrayList();

        Set<String> missingMavenData = new HashSet<>();

        String FOLDER = "C:\\Users\\Vikram.Tamboli\\Documents\\NetBeansProjects\\BlueLink_NewWorkflow_27_July\\lib";
        Files
                .walk(Paths.get(FOLDER), FileVisitOption.FOLLOW_LINKS)
                .map(Path::toFile)
                .sorted()
                .filter(f -> f.isFile())
                .filter(f -> f.getName().endsWith(".jar"))
                .map(f -> {
                    try {
                        return new JarFile(f);
                    } catch (Exception e) {
                        e.printStackTrace();
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .map(jar -> {
                    Properties properties = null;
                    Enumeration<JarEntry> entries = jar.entries();
                    while (entries.hasMoreElements()) {
                        //System.out.println("Enumeration - " + entries.toString());
                        JarEntry jarEntry = entries.nextElement();
                        if (jarEntry.getName().matches("^META-INF/maven/.*/pom\\.properties$")) {
                            try {
                                properties = new Properties();
                                properties.load(jar.getInputStream(jarEntry));
                                break;
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    if (properties == null) {
                        missingMavenData.add(jar.getName());

                    }
                    return properties;
                })
                .filter(Objects::nonNull)
                .forEach(properties -> {
                    System.out.println("<dependency>");
                    System.out.println("    <groupId>" + properties.getProperty("groupId") + "</groupId>");
                    System.out.println("    <artifactId>" + properties.getProperty("artifactId") + "</artifactId>");
                    System.out.println("    <version>" + properties.getProperty("version") + "</version>");
                    System.out.println("    <license>" + properties.getProperty("version") + "</license>");
                    System.out.println("</dependency>");
                    jarNameList.add(properties.getProperty("groupId"));
                });

        System.out.println("Those JAR files does not contain Maven metadata:");
        missingMavenData.forEach(System.out::println);

        return jarNameList;
    }
    
    //From the report, create a csv with infromation needed
    public static void searchExcel() {
        try {
            File fXmlFile = new File("C:\\Users\\Vikram.Tamboli\\eclipse-workspace\\test2\\target\\generated-resources\\licenses.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(fXmlFile);

            //optional, but recommended
            //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
            doc.getDocumentElement().normalize();

            // System.out.println("Root element :" + doc.getDocumentElement().getNodeName());
            NodeList nList = doc.getElementsByTagName("dependency");
            System.out.println("----------------------------");

            XPathFactory xpf = XPathFactory.newInstance();
            XPath xpath = xpf.newXPath();
            for (int temp = 0; temp < nList.getLength(); temp++) {
                Node nNode = nList.item(temp);
//                System.out.println("\nCurrent Element :" + nNode.getNodeName());
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element eElement = (Element) nNode;
//                    System.out.println("Group id : " + eElement.getElementsByTagName("groupId").item(0).getTextContent());
//                    System.out.println("ArtifactId : " + eElement.getElementsByTagName("artifactId").item(0).getTextContent());
//                    System.out.println("Version : " + eElement.getElementsByTagName("version").item(0).getTextContent());
                    String groupId = eElement.getElementsByTagName("groupId").item(0).getTextContent();
                    String artifaceId = eElement.getElementsByTagName("artifactId").item(0).getTextContent();
                    String version = eElement.getElementsByTagName("version").item(0).getTextContent();
                    String licenseName = (String) xpath.evaluate("/licenseSummary/dependencies/dependency[" + (temp + 1) + "]/licenses/license/name", doc, XPathConstants.STRING);
                    System.out.println(groupId + "," + artifaceId + "," + version.replace(",", "-") + "," + licenseName.replace(",", "-"));

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //parse and get XPath infromation
    static void parseXML() {
        try {
            SAXReader reader = new SAXReader();
            org.dom4j.Document document = reader.read(new File("C:\\Users\\Vikram.Tamboli\\eclipse-workspace\\test2\\target\\generated-resources\\licenses.xml"));
            document.getRootElement().normalize();
            List<org.dom4j.Node> nodeList = document.selectNodes(".//*");

            for (org.dom4j.Node node : nodeList) {
                org.dom4j.Element element = (org.dom4j.Element) node;
                Iterator<org.dom4j.Element> iterator = element.elementIterator();
                int count = 0;
                while (iterator.hasNext()) {
                    iterator.next();
                    count++;
                }
                //converted the switch case from earlier build to if case
                if (count == 0) {
                    String param = element.getUniquePath();
                    String value = element.getText();
                    //ScenarioConfig sc = new ScenarioConfig();
                    //sc.setParam(param);
                    //sc.setValue(value);
                    //.add(sc);
                    System.out.println("case 0 : outside if : " + param + " val : " + value);
                }
                if (!element.attributes().isEmpty()) {
                    for (int j = 0; j < element.attributes().size(); j++) {
                        org.dom4j.Attribute element1 = (org.dom4j.Attribute) element.attributes().get(j);
                        String param1 = element1.getUniquePath();
                        String value1 = element1.getText();
                        ///ScenarioConfig sc = new ScenarioConfig();
                        //sc.setParam(param1);
                        //sc.setValue(value1);
                        //config.add(sc);
                        System.out.println("case 0 : outside if : " + param1 + " val : " + value1);
                    }
                }
                //-----------------------------------------------------------//
            }
        } catch (Exception ex) {
            Logger.getLogger(JarDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
